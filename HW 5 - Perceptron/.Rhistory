mu2 <- c(15, 15)
data.train <- get.data(300,300, mu1, mu2, sd1, sd2, rhoXY, 2500)
data.test <- get.data(200,200, mu1, mu2, sd1, sd2, rhoXY, 2100)
mean.data <- colMeans(data.train[,1:2])
R <- max(apply(data.train[,1:2], 1, function(x){sqrt(sum((x - mean.data)^2))}))
maxIter <- 200
info <- perceptron(maxIter, data.train, data.test, W, b)
errors <- info[,1:2]
errors$iter <- 1:nrow(errors)
W <-  as.matrix(info[nrow(info), 3:4])
b <- info[nrow(info), 5]
data <- t(as.matrix(data.train[,1:2]))
gamma <- min(abs((W %*% data + b)/ norm(W, type = "2")))
melt.error <- melt(errors, id.vars = "iter", variable.name = "Type", value.name = "Error")
plots <- c(plots, ggplot(melt.error, aes(x = iter, y = Error, color = Type)) +
geom_line() + scale_colour_tableau())
ggplot(melt.error, aes(x = iter, y = Error, color = Type)) +
geom_line() + scale_colour_tableau()
plots
plots <- list(rep(0, length(mu)))
plots <- rbind(plots, ggplot(melt.error, aes(x = iter, y = Error, color = Type)) +
geom_line() + scale_colour_tableau())
plots
plots[1,]
p <- plots[1,]
p
source("c:/Users/Rishabh/Documents/BGSE Material/Sem2/14D005 Machine Learning/Seminar 5/HW/helper.R")
mu <- seq(33, 20, -1)
comparison<- c()
plots <- c()
i = 1
for( i in 1:length(mu)) {
rhoXY <- c(0.8, 0.5)
sd1 <- c(2, 2)
mu1 <- c(15, mu[1])
sd2 <- c(1, 1.5)
mu2 <- c(15, 15)
#test and train data
data.train <- get.data(300,300, mu1, mu2, sd1, sd2, rhoXY, 2500)
data.test <- get.data(200,200, mu1, mu2, sd1, sd2, rhoXY, 2100)
#Calculate R
mean.data <- colMeans(data.train[,1:2])
R <- max(apply(data.train[,1:2], 1, function(x){sqrt(sum((x - mean.data)^2))}))
#Perceptron Algorithm
maxIter <- 200
info <- perceptron(maxIter, data.train, data.test, W, b)
errors <- info[,1:2]
errors$iter <- 1:nrow(errors)
#calculate gamma
W <-  as.matrix(info[nrow(info), 3:4])
b <- info[nrow(info), 5]
data <- t(as.matrix(data.train[,1:2]))
gamma <- min(abs((W %*% data + b)/ norm(W, type = "2")))
#test vs train
melt.error <- melt(errors, id.vars = "iter", variable.name = "Type", value.name = "Error")
#plots <- rbind(plots, ggplot(melt.error, aes(x = iter, y = Error, color = Type)) +
#  geom_line() + scale_colour_tableau())
################################################################################
comparison <- rbind(comparison, c(R, gamma, nrow(info)))
}
source("c:/Users/Rishabh/Documents/BGSE Material/Sem2/14D005 Machine Learning/Seminar 5/HW/helper.R")
mu <- seq(33, 20, -1)
comparison<- c()
plots <- c()
i = 1
for( i in 1:length(mu)) {
rhoXY <- c(0.8, 0.5)
sd1 <- c(2, 2)
mu1 <- c(15, mu[1])
sd2 <- c(1, 1.5)
mu2 <- c(15, 15)
#test and train data
data.train <- get.data(300,300, mu1, mu2, sd1, sd2, rhoXY, 2500)
data.test <- get.data(200,200, mu1, mu2, sd1, sd2, rhoXY, 2100)
#Calculate R
mean.data <- colMeans(data.train[,1:2])
R <- max(apply(data.train[,1:2], 1, function(x){sqrt(sum((x - mean.data)^2))}))
#Perceptron Algorithm
maxIter <- 200
info <- perceptron(maxIter, data.train, data.test, W, b)
errors <- info[,1:2]
errors$iter <- 1:nrow(errors)
#calculate gamma
W <-  as.matrix(info[nrow(info), 3:4])
b <- info[nrow(info), 5]
data <- t(as.matrix(data.train[,1:2]))
gamma <- min(abs((W %*% data + b)/ norm(W, type = "2")))
#test vs train
melt.error <- melt(errors, id.vars = "iter", variable.name = "Type", value.name = "Error")
#plots <- rbind(plots, ggplot(melt.error, aes(x = iter, y = Error, color = Type)) +
#  geom_line() + scale_colour_tableau())
################################################################################
comparison <- rbind(comparison, c(R, gamma, nrow(info)))
}
colnames(comparison) <- c("R", "gamma", "convergence")
comparison
mu <- seq(33, 20, -1)
mu
for( i in 1:length(mu)) {
rhoXY <- c(0.8, 0.5)
sd1 <- c(2, 2)
mu1 <- c(15, mu[i])
sd2 <- c(1, 1.5)
mu2 <- c(15, 15)
#test and train data
data.train <- get.data(300,300, mu1, mu2, sd1, sd2, rhoXY, 2500)
data.test <- get.data(200,200, mu1, mu2, sd1, sd2, rhoXY, 2100)
#Calculate R
mean.data <- colMeans(data.train[,1:2])
R <- max(apply(data.train[,1:2], 1, function(x){sqrt(sum((x - mean.data)^2))}))
#Perceptron Algorithm
maxIter <- 200
info <- perceptron(maxIter, data.train, data.test, W, b)
errors <- info[,1:2]
errors$iter <- 1:nrow(errors)
#calculate gamma
W <-  as.matrix(info[nrow(info), 3:4])
b <- info[nrow(info), 5]
data <- t(as.matrix(data.train[,1:2]))
gamma <- min(abs((W %*% data + b)/ norm(W, type = "2")))
#test vs train
melt.error <- melt(errors, id.vars = "iter", variable.name = "Type", value.name = "Error")
#plots <- rbind(plots, ggplot(melt.error, aes(x = iter, y = Error, color = Type)) +
#  geom_line() + scale_colour_tableau())
################################################################################
comparison <- rbind(comparison, c(R, gamma, nrow(info)))
}
colnames(comparison) <- c("R", "gamma", "convergence")
comparison
comparison<- c()
mu <- seq(33, 20, -1)
comparison<- c()
plots <- c()
for( i in 1:length(mu)) {
rhoXY <- c(0.8, 0.5)
sd1 <- c(2, 2)
mu1 <- c(15, mu[i])
sd2 <- c(1, 1.5)
mu2 <- c(15, 15)
#test and train data
data.train <- get.data(300,300, mu1, mu2, sd1, sd2, rhoXY, 2500)
data.test <- get.data(200,200, mu1, mu2, sd1, sd2, rhoXY, 2100)
#Calculate R
mean.data <- colMeans(data.train[,1:2])
R <- max(apply(data.train[,1:2], 1, function(x){sqrt(sum((x - mean.data)^2))}))
#Perceptron Algorithm
maxIter <- 200
info <- perceptron(maxIter, data.train, data.test, W, b)
errors <- info[,1:2]
errors$iter <- 1:nrow(errors)
#calculate gamma
W <-  as.matrix(info[nrow(info), 3:4])
b <- info[nrow(info), 5]
data <- t(as.matrix(data.train[,1:2]))
gamma <- min(abs((W %*% data + b)/ norm(W, type = "2")))
#test vs train
melt.error <- melt(errors, id.vars = "iter", variable.name = "Type", value.name = "Error")
#plots <- rbind(plots, ggplot(melt.error, aes(x = iter, y = Error, color = Type)) +
#  geom_line() + scale_colour_tableau())
################################################################################
comparison <- rbind(comparison, c(R, gamma, nrow(info)))
}
colnames(comparison) <- c("R", "gamma", "convergence")
comparison
comparison[order(-comparison[,1], comparison[,2]),]
comparison[order(comparison[,1], -comparison[,2]),]
comparison[order(-comparison[,2]),]
comparison[order(-comparison[,3]),]
comparison[order(comparison[,3]),]
class(comparison)
comparison <- as.data.frame(comparison)
comparison$Upper.Limit <- apply(comparison[,1:2], 1, function(x) (x[1] / x[2]) ^ 2)
comparison$Upper.Limit
comparison
comparison[order(comparison[,4]),]
round(comparison, 3)
comparison <- round(comparison, 3)
plot(comparison$R, comparison$convergence)
library("devtools")
install_github("ropensci/plotly")
library("plotly")
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point()
comparison <- round(comparison, 3)
library()
install_github("ropensci/plotly")
if (!require("devtools") install.packages("devtools")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("reshape2")) install.packages("reshape2")
if (!require("ggthemes")) install.packages("ggthemes")
library("plotly")
source("c:/Users/Rishabh/Documents/BGSE Material/Sem2/14D005 Machine Learning/Seminar 5/HW/helper.R")
#data parameters
mu <- seq(33, 20, -1)
comparison<- c()
plots <- c()
for( i in 1:length(mu)) {
rhoXY <- c(0.8, 0.5)
sd1 <- c(2, 2)
mu1 <- c(15, mu[i])
sd2 <- c(1, 1.5)
mu2 <- c(15, 15)
#test and train data
data.train <- get.data(300,300, mu1, mu2, sd1, sd2, rhoXY, 2500)
data.test <- get.data(200,200, mu1, mu2, sd1, sd2, rhoXY, 2100)
#Calculate R
mean.data <- colMeans(data.train[,1:2])
R <- max(apply(data.train[,1:2], 1, function(x){sqrt(sum((x - mean.data)^2))}))
#Perceptron Algorithm
maxIter <- 200
info <- perceptron(maxIter, data.train, data.test, W, b)
errors <- info[,1:2]
errors$iter <- 1:nrow(errors)
#calculate gamma
W <-  as.matrix(info[nrow(info), 3:4])
b <- info[nrow(info), 5]
data <- t(as.matrix(data.train[,1:2]))
gamma <- min(abs((W %*% data + b)/ norm(W, type = "2")))
#test vs train
melt.error <- melt(errors, id.vars = "iter", variable.name = "Type", value.name = "Error")
#plots <- rbind(plots, ggplot(melt.error, aes(x = iter, y = Error, color = Type)) +
#  geom_line() + scale_colour_tableau())
################################################################################
comparison <- rbind(comparison, c(R, gamma, nrow(info)))
}
ggplot(comparison, aes(x = R, y = convergence, color = factor(gamma))) +
geom_point()
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point() +
scale_color_gradient(low = "black", high = "red")
colnames(comparison) <- c("R", "gamma", "convergence")
comparison <- as.data.frame(comparison)
comparison <- round(comparison, 3)
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point() +
scale_color_gradient(low = "black", high = "red")
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 3) +
scale_color_gradient(low = "black", high = "red")
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5) +
scale_color_gradient(low = "black", high = "red")
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5) +
scale_color_gradient(low = "blue", high = "red")
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5) +
scale_color_gradient(low = "#fee8c8", high = "#e34a33")
ggplot(comparison, aes(x = R, y = convergence, color = gamma, fill = "black")) +
geom_point(size = 5) +
scale_color_gradient(low = "#fee8c8", high = "#e34a33")
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5) +
scale_color_gradient(low = "#fc8d59", high = "#b30000")
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5) +
scale_color_gradient(low = "#67a9cf", high = "#b30000")
scale_color_gradient(low = "#67a9cf", high = "#016c59")
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5) +
scale_color_gradient(low = "#67a9cf", high = "#016c59")
mu <- seq(33, 20, -0.5)
comparison<- c()
plots <- c()
for( i in 1:length(mu)) {
rhoXY <- c(0.8, 0.5)
sd1 <- c(2, 2)
mu1 <- c(15, mu[i])
sd2 <- c(1, 1.5)
mu2 <- c(15, 15)
#test and train data
data.train <- get.data(300,300, mu1, mu2, sd1, sd2, rhoXY, 2500)
data.test <- get.data(200,200, mu1, mu2, sd1, sd2, rhoXY, 2100)
#Calculate R
mean.data <- colMeans(data.train[,1:2])
R <- max(apply(data.train[,1:2], 1, function(x){sqrt(sum((x - mean.data)^2))}))
#Perceptron Algorithm
maxIter <- 200
info <- perceptron(maxIter, data.train, data.test, W, b)
errors <- info[,1:2]
errors$iter <- 1:nrow(errors)
#calculate gamma
W <-  as.matrix(info[nrow(info), 3:4])
b <- info[nrow(info), 5]
data <- t(as.matrix(data.train[,1:2]))
gamma <- min(abs((W %*% data + b)/ norm(W, type = "2")))
#test vs train
melt.error <- melt(errors, id.vars = "iter", variable.name = "Type", value.name = "Error")
#plots <- rbind(plots, ggplot(melt.error, aes(x = iter, y = Error, color = Type)) +
#  geom_line() + scale_colour_tableau())
################################################################################
comparison <- rbind(comparison, c(R, gamma, nrow(info)))
}
colnames(comparison) <- c("R", "gamma", "convergence")
comparison <- as.data.frame(comparison)
comparison <- round(comparison, 3)
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5) +
scale_color_gradient(low = "#67a9cf", high = "#016c59")
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5, alpha = 0.9) +
scale_color_gradient(low = "#67a9cf", high = "#016c59")
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5, alpha = 0.9) +
scale_color_gradient(low = "#fd8d3c", high = "#253494")
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5, alpha = 0.9) +
scale_color_gradient(low = "#fd8d3c", high = "#253494") +
scale_x_reverse()
comparison
set_credentials_file("rishi1226", "o6jgml5ibx")
response<-py$ggplotly()
py <- plotly(user="rishi1226", key="o6jgml5ibx")
response<-py$ggplotly()
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5, alpha = 0.9) +
scale_color_gradient(low = "#fd8d3c", high = "#253494") +
scale_x_reverse()
set_credentials_file("rishi1226", "o6jgml5ibx")
py <- plotly(user="rishi1226", key="o6jgml5ibx")
response<-py$ggplotly()
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5, alpha = 0.9) +
set_credentials_file("rishi1226", "o6jgml5ibx")
py <- plotly(user="rishi1226", key="o6jgml5ibx")
response<-py$ggplotly()
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5, alpha = 0.9) +
scale_color_gradient(low = "#fd8d3c", high = "#253494")
set_credentials_file("rishi1226", "o6jgml5ibx")
py <- plotly(user="rishi1226", key="o6jgml5ibx")
response<-py$ggplotly()
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5, alpha = 0.9) + geom_line( ) +
scale_color_gradient(low = "#fd8d3c", high = "#253494")
set_credentials_file("rishi1226", "o6jgml5ibx")
py <- plotly(user="rishi1226", key="o6jgml5ibx")
response<-py$ggplotly()
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5, alpha = 0.9) +
scale_color_gradient(low = "#fd8d3c", high = "#253494")
p1 <- ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
set_credentials_file("rishi1226", "o6jgml5ibx")
py <- plotly(user="rishi", key="APIKEY")
response<-py$ggplotly()
p1 <- ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5, alpha = 0.9) +
scale_color_gradient(low = "#fd8d3c", high = "#253494") +
scale_x_reverse()
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5, alpha = 0.9) +
scale_color_gradient(low = "#fd8d3c", high = "#253494") +
scale_x_reverse()
set_credentials_file("rishi1226", "o6jgml5ibx")
py <- plotly(user="rishi", key="APIKEY")
response<-py$ggplotly()
response<-py$ggplotly()
set_credentials_file("rishi1226", "o6jgml5ibx")
py <- plotly(user="rishi", key="APIKEY")
response<-py$ggplotly()
set_credentials_file("rishi1226", "o6jgml5ibx")
set_credentials_file("rishi1226", "o6jgml5ibx")
py <- plotly(user="rishi", key="o6jgml5ibx")
response<-py$ggplotly()
set_credentials_file("rishi1226", "o6jgml5ibx")
py <- plotly(user="rishi", key= "o6jgml5ibx")
response<-py$ggplotly()
py <- plotly(user="rishi1226", key= "o6jgml5ibx")
response<-py$ggplotly()
p1 <- ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5, alpha = 0.9) +
scale_color_gradient(low = "#fd8d3c", high = "#253494") +
scale_x_reverse()
jpeg(filename = 'CovergenceTrend.jpg', units = "in", width = 9, height = 9, res = 400)
p1
dev.off()
getwd()
ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5, alpha = 0.9) +
scale_color_gradient(low = "#fd8d3c", high = "#253494")
set_credentials_file("rishi1226", "o6jgml5ibx")
set_credentials_file("rishi1226", "o6jgml5ibx")
py <- plotly(user="rishi1226", key= "o6jgml5ibx")
response<-py$ggplotly()
p1
setwd("~/BGSE Material/Sem2/14D005 Machine Learning/Seminar 5/HW")
source("c:/Users/Rishabh/Documents/BGSE Material/Sem2/14D005 Machine Learning/Seminar 5/HW/helper.R")
comparison <- as.data.frame(comparison)
comparison <- round(comparison, 3)
p1 <- ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5, alpha = 0.9) +
scale_color_gradient(low = "#fd8d3c", high = "#253494")
jpeg(filename = 'CovergenceTrend.jpg', units = "in", width = 9, height = 9, res = 400)
p1
dev.off()
p1
p1 + geom_text(aes(10, 180, label="correct color", color="NA*"))
p1 + geom_text(aes(7, .9, label="correct color", color="NA*"))
text <- data.frame(
x = c(5, 5),
y = c(180, 170),
text = c("Non Linearly Seperable","No Convergence"))
text
p1 + geom_text(text, aes(x, y, label=text))
text <- data.frame(
R = c(5, 5),
convergence = c(180, 170),
text = c("Non Linearly Seperable","No Convergence"))
p1 + geom_text(text, aes(x, y, label=text))
text
p1 + geom_text(text, aes(R, convergence, label=text))
p1 + annotate("text", label = "Non Linearly Seperable", x = 5, y = 180, size = 5, colour = "black"))
p1 +
annotate("text", label = "Non Linearly Seperable", x = 5, y = 180, size = 5, colour = "black")
p1
p1 +
annotate("text", label = "Non Linearly Seperable", x = 10, y = 180, size = 3, colour = "black")
p1 +
annotate("text", label = "Non Seperable", x = 12, y = 180, size = 3, colour = "black")
p1 +
annotate("text", label = "Non Seperable", x = 10, y = 180, size = 3, colour = "black")
annotate("text", label = "Non Seperable", x = 10, y = 180, size = 3, colour = "black") +
annotate("text", label = "No Convergence", x = 10, y = 170, size = 3, colour = "black")
p1 +
annotate("text", label = "Non Seperable", x = 10, y = 180, size = 3, colour = "black") +
annotate("text", label = "No Convergence", x = 10, y = 170, size = 3, colour = "black")
p1 +
annotate("text", label = "Non Seperable", x = 10, y = 180, size = 3, colour = "black") +
annotate("text", label = "No Convergence", x = 10.1, y = 170, size = 3, colour = "black")
p1 <- p1 +
annotate("text", label = "Non Seperable", x = 10, y = 180, size = 3, colour = "black") +
annotate("text", label = "No Convergence", x = 10.1, y = 170, size = 3, colour = "black")
p1 <- p1 +
annotate("text", label = "Non Seperable", x = 10, y = 180, size = 3, colour = "black") +
annotate("text", label = "No Convergence", x = 10.1, y = 170, size = 3, colour = "black")
jpeg(filename = 'CovergenceTrend.jpg', units = "in", width = 9, height = 9, res = 400)
p1
dev.off()
p1 <- p1 +
annotate("text", label = "Non Seperable", x = 10, y = 180, size = 3, colour = "black") +
annotate("text", label = "No Convergence", x = 10, y = 170, size = 3, colour = "black")
jpeg(filename = 'CovergenceTrend.jpg', units = "in", width = 9, height = 9, res = 400)
p1
dev.off()
p1 <- p1 +
annotate("text", label = "Non Seperable", x = 10, y = 180, size = 3, colour = "black") +
annotate("text", label = "No Convergence", x = 10, y = 170, size = 3, colour = "black")
jpeg(filename = 'CovergenceTrend.jpg', units = "in", width = 9, height = 9, res = 400)
p1
dev.off()
p1 <- ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5, alpha = 0.9) +
scale_color_gradient(low = "#fd8d3c", high = "#253494")
p1
p1 <- p1 +
annotate("text", label = "Non Seperable", x = 10, y = 180, size = 3, colour = "black") +
annotate("text", label = "No Convergence", x = 10, y = 170, size = 3, colour = "black")
jpeg(filename = 'CovergenceTrend.jpg', units = "in", width = 9, height = 9, res = 400)
p1
dev.off()
if (!require("devtools") install.packages("devtools")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("reshape2")) install.packages("reshape2")
if (!require("ggthemes")) install.packages("ggthemes")
source("c:/Users/Rishabh/Documents/BGSE Material/Sem2/14D005 Machine Learning/Seminar 5/HW/helper.R")
#data parameters
mu <- seq(33, 20, -0.5)
comparison<- c()
plots <- c()
for( i in 1:length(mu)) {
rhoXY <- c(0.8, 0.5)
sd1 <- c(2, 2)
mu1 <- c(15, mu[i])
sd2 <- c(1, 1.5)
mu2 <- c(15, 15)
#test and train data
data.train <- get.data(300,300, mu1, mu2, sd1, sd2, rhoXY, 2500)
data.test <- get.data(200,200, mu1, mu2, sd1, sd2, rhoXY, 2100)
#Calculate R
mean.data <- colMeans(data.train[,1:2])
R <- max(apply(data.train[,1:2], 1, function(x){sqrt(sum((x - mean.data)^2))}))
#Perceptron Algorithm
maxIter <- 100
info <- perceptron(maxIter, data.train, data.test, W, b)
errors <- info[,1:2]
errors$iter <- 1:nrow(errors)
#calculate gamma
W <-  as.matrix(info[nrow(info), 3:4])
b <- info[nrow(info), 5]
data <- t(as.matrix(data.train[,1:2]))
gamma <- min(abs((W %*% data + b)/ norm(W, type = "2")))
#test vs train
melt.error <- melt(errors, id.vars = "iter", variable.name = "Type", value.name = "Error")
#plots <- rbind(plots, ggplot(melt.error, aes(x = iter, y = Error, color = Type)) +
#  geom_line() + scale_colour_tableau())
################################################################################
comparison <- rbind(comparison, c(R, gamma, nrow(info)))
}
colnames(comparison) <- c("R", "gamma", "convergence")
comparison <- as.data.frame(comparison)
comparison <- round(comparison, 3)
p1 <- ggplot(comparison, aes(x = R, y = convergence, color = gamma)) +
geom_point(size = 5, alpha = 0.9) +
scale_color_gradient(low = "#fd8d3c", high = "#253494")
p1
p1 <- p1 +
annotate("text", label = "Non Seperable", x = 10, y = 90, size = 3, colour = "black") +
annotate("text", label = "No Convergence", x = 10, y = 80, size = 3, colour = "black")
p1
jpeg(filename = 'CovergenceTrend.jpg', units = "in", width = 9, height = 9, res = 400)
p1
dev.off()
